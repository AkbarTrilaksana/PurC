# state: `begin` | `in_sample`
# sample type: `undefined` | `positive` | `negative`
# <begin>/comment_line:  ^'#' .* '\n'
# <begin>/sample_type:   ^('P'|'N') ':' .* '\n' { set sample_type; }
# <begin>/blank_line:    ^[ \t]* '\n'
# <begin>/@default:                             { switch to in_sample; }
# <sample>sample_record: ^(.* '\n')* ';' '\n'   { process sample;
#                                                 switch to begin; }


# blank lines
                      

P: # bellow are positive samples
# blank lines
                      

# all seperated with a SPACE
TOKEN : FROM 0 ;
TOKEN : FROM 0 TO 10 ;
TOKEN : FROM 0 TO 10 ADVANCE 2 ;
TOKEN : FROM 0 TO 10 ADVANCE 1 + 2 ;
TOKEN : FROM 0 TO 10 ADVANCE 1 + 2 / 4 - 3 * 5 ;
TOKEN : FROM 0 TO 10 ADVANCE 1 + 2 / ( 4 - 3 ) * 5 ;
TOKEN : FROM 0 TO 10 DELIMETERS 'hello' ;
TOKEN : FROM 0 TO 10 ADVANCE 1 + 2 / ( 4 - 3 ) * 5 DELIMETERS 'hello' ;
TOKEN : FROM 0 TO 10 UNTIL AS 'a' ;
TOKEN : FROM 0 TO 10 UNTIL AS 'a' , AS 'b' ;
TOKEN : FROM 0 TO 10 UNTIL AS 'a' , AS 'b' , LIKE 'de*f' ;
TOKEN : FROM 0 TO 10 UNTIL AS 'a' , AS 'b' , LIKE 'de*f' , LIKE 'fadf?f' ;
TOKEN : FROM 0 TO 10 UNTIL AS 'a' , AS 'b' , LIKE 'de*f' , LIKE 'fadf?f' , LIKE /hello/ ;
TOKEN : FROM 0 TO 10 UNTIL AS 'a\b\f\r\n\t\\\uded0x' ;
TOKEN : FROM 0 TO 10 UNTIL AS "a\b\f\r\n\t\\\uded0x" ;
TOKEN : FROM 0 TO 10 UNTIL AS 'a\b\f\r\'\n\t\\\uded0x' ;
TOKEN : FROM 0 TO 10 UNTIL AS "a\b\f\r\"\n\t\\\uded0x" ;
TOKEN : FROM 0 TO 10 UNTIL AS 'a'isc789 ;
TOKEN : FROM 0 TO 10 UNTIL AS 'a'isc ;
TOKEN : FROM 0 TO 10 UNTIL AS 'a'789 ;
TOKEN : FROM 0 TO 10 UNTIL AS 'a'789 , AS 'b' ;
TOKEN : FROM 0 TO 10 UNTIL AS 'a'789 , AS 'b' , LIKE /hello/igmsuy ;
TOKEN : FROM 0 TO 10 UNTIL AS 'a'789 , AS 'b' , LIKE /hello/igmsuy , LIKE 'world'isc789 ;
# no SPACE in between
TOKEN:FROM 0 TO 10 ADVANCE 1+2/(4-3)*5;
TOKEN:FROM 0;
TOKEN:FROM 0 TO 10;
TOKEN:FROM 0 TO 10 ADVANCE 2 ;
TOKEN:FROM 0 TO 10 ADVANCE 1+2;
TOKEN:FROM 0 TO 10 ADVANCE 1+2/4-3*5;
TOKEN:FROM 0 TO 10 ADVANCE 1+2/(4-3)*5;
TOKEN:FROM 0 TO 10 DELIMETERS 'hello' ;
TOKEN:FROM 0 TO 10 ADVANCE 1+2/(4-3)*5 DELIMETERS 'hello';
TOKEN:FROM 0 TO 10 UNTIL AS 'a';
TOKEN:FROM 0 TO 10 UNTIL AS 'a',AS 'b';
TOKEN:FROM 0 TO 10 UNTIL AS 'a',AS 'b',LIKE 'de*f';
TOKEN:FROM 0 TO 10 UNTIL AS 'a',AS 'b',LIKE 'de*f',LIKE 'fadf?f';
TOKEN:FROM 0 TO 10 UNTIL AS 'a',AS 'b',LIKE 'de*f',LIKE 'fadf?f',LIKE /hello/;
TOKEN:FROM 0 TO 10 UNTIL AS 'a\b\f\r\n\t\\\uded0x';
TOKEN:FROM 0 TO 10 UNTIL AS 'a'isc789;
TOKEN:FROM 0 TO 10 UNTIL AS 'a'isc;
TOKEN:FROM 0 TO 10 UNTIL AS 'a'789;
TOKEN:FROM 0 TO 10 UNTIL AS 'a'789,AS 'b';
TOKEN:FROM 0 TO 10 UNTIL AS 'a'789,AS 'b',LIKE /hello/igmsuy;
TOKEN:FROM 0 TO 10 UNTIL AS 'a'789,AS 'b',LIKE /hello/igmsuy,LIKE 'world'isc789;
# multiple line
TOKEN:
        FROM 0
        TO 1
        +
        2
        /
        (
        4
        -
        3
        )
        *
        5
         
        ADVANCE 1
        +
        2
        /
        (
        4
        -
        3
        )
        *
        5
        ;
TOKEN: FROM
0 TO 10 ADVANCE 1;
TOKEN: FROM 0 TO
10 ADVANCE 1;



N: # bellow are negative samples
# blank lines
                      

# SPACE required
TOKEN:FROM0 TO 10 ADVANCE 1;
TOKEN:FROM 0TO 10 ADVANCE 1;
TOKEN:FROM 0 TO10 ADVANCE 1;
TOKEN:FROM 0 TO 10 ADVANCE1;

# '\n' in wrong place
TOKEN
:FROM 0 TO 10 ADVANCE 1;

TOKEN: FROM 0 TO 10ADVANCE
1;

TOKEN: FROM 0TO 10ADVANCE
1;

