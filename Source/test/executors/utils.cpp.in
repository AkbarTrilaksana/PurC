#define ENV(env)      #env

enum sample_file_parsing_state {
    SAMPLE_IN_BEGIN,
    SAMPLE_IN_RULE,
};

enum sample_type {
    UNRECOGNIZED_SAMPLE,
    POSITIVE_SAMPLE,
    NEGATIVE_SAMPLE,
};

struct sample {
    const char        *rule;
    const char        *fn;
    size_t             lineno;
};

static bool debug_flex  = false;       // trace flex
static bool debug_bison = false;       // trace bison
static bool verbose_neg = false;       // if print err_msg when neg 'succeeds'
static char sample_files[PATH_MAX+1];  // sample files searching pattern

struct statistics {
    int        positives;
    int        negatives;
    int        positives_fail;
    int        negatives_fail;
};
static struct statistics counter;

static inline void print_statics(void)
{
    std::cerr << "positives/failes: ("
        << counter.positives << "/" << counter.positives_fail << ")"
        << std::endl;
    std::cerr << "negatives/failes: ("
        << counter.negatives << "/" << counter.negatives_fail << ")"
        << std::endl;
}

static inline void
test_str_append(char **rule, const char *line)
{
    size_t len = 0;
    if (*rule)
        len = strlen(*rule);

    size_t n = len + strlen(line);

    char *p = (char*)realloc(*rule, n + 1);
    if (!p) {
        free(*rule);
        FAIL() << "Out of memory";
        return; // never reached here
    }
    if (!*rule)
        p[0] = '\0';

    strcat(p, line);
    *rule = p;
}

static inline bool
is_blank_line(const char *line)
{
    for (; *line; ++line) {
        if (isspace(*line))
            continue;
        return false;
    }
    return true;
}

static inline bool
process_positive(const struct sample *sample,
        std::function<bool(const char *rule, char **err_msg)> on_rule)
{
    const char *rule   = sample->rule;
    const char *fn     = sample->fn;
    size_t      lineno = sample->lineno;

    char *err_msg = nullptr;
    bool r = on_rule(rule, &err_msg);

    ++counter.positives;

    if (!r) {
        ++counter.positives_fail;

        const char *err = err_msg ? err_msg : "";
        std::cerr << fn << "[" << lineno << "]:Not postive:[" << rule << "]:"
            << err << std::endl;
    }

    if (err_msg)
        free(err_msg);

    return r;
}

static inline bool
process_negative(const struct sample *sample,
        std::function<bool(const char *rule, char **err_msg)> on_rule)
{
    const char *rule   = sample->rule;
    const char *fn     = sample->fn;
    size_t      lineno = sample->lineno;

    char *err_msg = nullptr;
    bool r = on_rule(rule, &err_msg);

    ++counter.negatives;

    if (!r && verbose_neg) {
        const char *err = err_msg ? err_msg : "";

        std::cerr << "As expected:[" << rule << "]:"
            << err << std::endl;
    } else if (r) {
        ++counter.negatives_fail;

        std::cerr << fn << "[" << lineno << "]:Not negative:[" << rule << "]"
            << std::endl;
    }

    if (err_msg)
        free(err_msg);

    return !r;
}

static inline void
process_rule(const struct sample *sample, enum sample_type st,
        std::function<bool(const char *rule, char **err_msg)> on_rule)
{
    if (st == POSITIVE_SAMPLE) {
        const char *rule = sample->rule;
        if (rule[0] == '\0')
            return;

        if (!process_positive(sample, on_rule))
            ADD_FAILURE();
    } else if (st == NEGATIVE_SAMPLE) {
        if (!process_negative(sample, on_rule))
            ADD_FAILURE();
    } else {
        const char *rule = sample->rule;
        FAIL() << "Unrecognized sample: [" << rule << "]" << std::endl;
    }
}

static inline void
process_file(FILE *f, const char *fn,
        std::function<bool(const char *rule, char **err_msg)> on_rule)
{
    struct sample v;
    v.fn = fn;

    char    *linebuf = NULL;
    size_t   len  = 0;

    enum sample_file_parsing_state state = SAMPLE_IN_BEGIN;
    enum sample_type st = UNRECOGNIZED_SAMPLE;

    char *rule = NULL;

    int lineno = 0;
    while (!feof(f)) {
        if (linebuf)
            linebuf[0] = '0';
        ssize_t n = getline(&linebuf, &len, f);
        if (n<0) {
            int err = errno;
            if (feof(f))
                break;

            std::cerr << "Failed reading file: [" << err << "]"
                << strerror(err) << std::endl;
            break;
        }
        if (n<=0)
            continue;

        ++lineno;

        char *line = linebuf;

again:
        switch (state) {
            case SAMPLE_IN_BEGIN:
                {
                    // comment
                    if (line[0] == '#')
                        break;
                    if (is_blank_line(line))
                        break;
                    if (strstr(line, "P:") == line) {
                        st = POSITIVE_SAMPLE;
                    }
                    else if (strstr(line, "N:") == line) {
                        st = NEGATIVE_SAMPLE;
                    }
                    else {
                        if (st != UNRECOGNIZED_SAMPLE) {
                            state = SAMPLE_IN_RULE;
                            goto again;
                        }
                        std::cerr << "Unrecognized: @" << lineno
                            << "[" << line << "]" << std::endl;
                    }
                } break;
            case SAMPLE_IN_RULE:
                {
                    char *p = strstr(line, ";\n"); // FIXME: ';\r\n'
                    if (p) {
                        // remove ';\n';
                        *p = '\0';

                        test_str_append(&rule, line);
                        v.lineno = lineno;
                        v.rule   = rule;
                        process_rule(&v, st, on_rule);
                        rule[0] = '\0';
                        state = SAMPLE_IN_BEGIN;
                    } else {
                        test_str_append(&rule, line);
                    }
                } break;
            default:
                FAIL() << "Internal logic error";
        }
    }

    if (rule) {
        if (state == SAMPLE_IN_RULE) {
            if (!is_blank_line(rule)) {
                v.lineno = lineno;
                v.rule   = rule;
                process_rule(&v, st, on_rule);
            }
        }
    }

    if (rule)
        free(rule);

    if (linebuf)
        free(linebuf);
}

static inline void
process_sample_files(const char *pattern,
        std::function<bool(const char *rule, char **err_msg)> on_rule)
{
    glob_t gbuf;
    memset(&gbuf, 0, sizeof(gbuf));

    gbuf.gl_offs = 0;
    int r = glob(pattern, GLOB_DOOFFS | GLOB_APPEND, NULL, &gbuf);
    if (r) {
        FAIL() << "^^^^^^:" << pattern << std::endl;
    }

    if (r == 0) {
        for (size_t i=0; i<gbuf.gl_pathc; ++i) {
            const char *file = gbuf.gl_pathv[i];
            std::cerr << "file: [" << file << "]" << std::endl;

            FILE *f = fopen(file, "r");
            EXPECT_NE(f, nullptr) << "Failed to open file: ["
                << file << "]" << std::endl;
            if (f) {
                const char *fn = basename((char*)file);
                process_file(f, fn, on_rule);
            }

            fclose(f);
        }
    }
    globfree(&gbuf);
}

static inline void get_option_from_env(const char *rel, bool print)
{
    const char *env;

    env = ENV(SAMPLE_FILES);
    test_getpath_from_env_or_rel(sample_files, sizeof(sample_files),
            env, rel);
    if (print) {
        std::cerr << "env: export " << env << "=" << sample_files << std::endl;
    }

    env = ENV(DEBUG_FLEX);
    debug_flex = test_getbool_from_env_or_default(env, debug_flex);
    if (print) {
        std::cerr << "env: export " << env << "=" << debug_flex << std::endl;
    }

    env = ENV(DEBUG_BISON);
    debug_bison = test_getbool_from_env_or_default(env, debug_bison);
    if (print) {
        std::cerr << "env: export " << env << "=" << debug_bison << std::endl;
    }

    env = ENV(VERBOSE_NEG);
    verbose_neg = test_getbool_from_env_or_default(env, verbose_neg);
    if (print) {
        std::cerr << "env: export " << env << "=" << verbose_neg << std::endl;
    }
}

